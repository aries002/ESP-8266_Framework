///////////////////////////////////////////////////////////////////////////////////
/*
                Web Server Setup
  This file contains web server and web socket setup function. When need to add more
pages or new function you can edit this file and add the web server config on webserver function.

*/

///////////////////////////////////////////////////////////////////////////////////



//-------------------------------------SYSTEM WEB PROCESSOR--------------------------
void ICACHE_FLASH_ATTR handleRestart(AsyncWebServerRequest *request){
  if(request->getParam("actiom", true)->value() == "restart"){
    request->send(200, "text/plain", "Device restarting");
    delay(3000);
    ESP.restart();
  }else{
    request->send(200, "text/plain", "Illegal Request!!");
  }
}
void ICACHE_FLASH_ATTR handleConfig(AsyncWebServerRequest *request){
  Serial.println("Change configuration...");
  
  if(request->hasParam("wifi_ssid", true) && request->hasParam("wifi_password", true) && request->hasParam("mqtt_host", true) && request->hasParam("web_updater_url", true)){
    Serial.println("Creating json file");
    DynamicJsonBuffer jsonBuffer;
    JsonObject &root = jsonBuffer.createObject();
    //wifi config
    root["wifi_ssid"] = request->getParam("wifi_ssid", true)->value();
    root["wifi_password"] = request->getParam("wifi_password", true)->value();
    String mode_wifi = request->getParam("wifi_mode", true)->value();
    if(mode_wifi == "true"){
      root["wifi_mode"] = true;
    }else{
      root["wifi_mode"] = false;
    }

    //mqtt config
    

    
    root["mqtt_host"] = request->getParam("mqtt_host", true)->value();
    root["mqtt_user"] = request->getParam("mqtt_user", true)->value();
    

    if(root["mqtt_host"] != false){
      root["mqtt"] = true;
      String input_mqtt_user = request->getParam("mqtt_user", true)->value();
      if(input_mqtt_user != ""){
        root["mqtt_user"] = input_mqtt_user;
        root["mqtt_password"] = request->getParam("mqtt_password", true)->value();
      }else{
        root["mqtt_user"] = "admin";
        root["mqtt_password"] = "";
      }
      String input_mqtt_topic = request->getParam("mqtt_topic", true)->value();
      if(input_mqtt_topic != ""){
        root["mqtt_topic"] = input_mqtt_topic;
      }
      else{
        root["mqtt_topic"] = "ESP_Framework";
      }
    }else{
      root["mqtt"] = false;
    }

    root["web_updater_url"] = request->getParam("web_updater_url", true)->value();
    root["web_updater_token"] = request->getParam("web_updater_token", true)->value();
    // root["web_updater_url"] = (request->getParam("web_updater_url", true)->value() != "") ? request->getParam("web_updater_url", true) : "";
    // root["web_updater_token"] = (request->getParam("web_updater_token", true)->value() != "") ? request->getParam("web_updater_token", true) : "";
    // Delete old version
    if(SPIFFS.exists("/konfig.json")){
      Serial.println("Removing Configuration");
      SPIFFS.remove("/konfig.json");
    }
    // Create the new one
    File f = SPIFFS.open("/konfig.json", "w");
#ifdef DEBUG
    root.printTo(Serial);
#endif
    if (root.printTo(f) == 0) {
#ifdef DEBUG
      Serial.println("Failed to write to file");
#endif
    }
    f.close();
    request->send(200, "text/plain", "Configuration saved!!. Device rebooting..");
    delay(1000);
    ESP.restart();
  }
}

String ICACHE_FLASH_ATTR getTemperature() {
  long temperature = random(28, 38);
  // Read temperature as Fahrenheit (isFahrenheit = true)
  //float temperature = 1.8 * bme.readTemperature() + 32;
  Serial.println(temperature);
  return String(temperature);
}
  
String ICACHE_FLASH_ATTR getHumidity() {
  long humidity = random(50, 80);
  Serial.println(humidity);
  return String(humidity);
}

String ICACHE_FLASH_ATTR getPressure() {
  long pressure = random(10, 100);
  Serial.println(pressure);
  return String(pressure);
}

//configuration page text processor
String ICACHE_FLASH_ATTR config_processor(const String& var){
  if(var == "WIFI_SSID"){
    return wifi_ssid;
  }
  else if(var == "WIFI_PASSWORD"){
    return wifi_password;
  }
  else if(var == "WIFI_CLIENT"){
    if(wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "WIFI_AP"){
    if(!wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "MQTT_HOST"){
    return mqtt_host;
  }
  else if(var == "MQTT_USER"){
    return mqtt_user;
  }
  else if(var == "MQTT_PASSWORD"){
    return mqtt_password;
  }
  else if(var == "MQTT_TOPIC"){
    return mqtt_topic;
  }
  else if(var == "WEB_UPDATER_URL"){
    return web_updater_url;
  }
  else if(var == "WEB_UPDATER_TOKEN"){
    return web_updater_token;
  }
  else{
    return "";
  }
}

String ICACHE_FLASH_ATTR processor(const String& var){
  Serial.println(var);
  if(var == "STATE"){
    if(digitalRead(statusLED)){
      ledState = "ON";
    }
    else{
      ledState = "OFF";
    }
    Serial.print(ledState);
    return ledState;
  }
  else if (var == "TEMPERATURE"){
    return getTemperature();
  }
  else if (var == "HUMIDITY"){
    return getHumidity();
  }
  else if (var == "PRESSURE"){
    return getPressure();
  }
  else{
    return "0";
  }
}


// main web server route
void ICACHE_FLASH_ATTR webserver(){
  //....................................WEB SERVER SETUP............................
  // Web Server using main web service
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  // Route to load required file
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/style.css", "text/css");
  });

    // Route to set GPIO to HIGH
  server.on("/on", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, HIGH);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  
  // Route to set GPIO to LOW
  server.on("/off", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, LOW);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });

  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getTemperature().c_str());
  });
  
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getHumidity().c_str());
  });
  
  server.on("/pressure", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getPressure().c_str());
  });


  //web configuration and 404
  server.on("/config", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/config.html", String(), false, config_processor);
  });

  server.on("/save_config", HTTP_POST, handleConfig);

  server.on("/reset", HTTP_POST, [](AsyncWebServerRequest *request){
    if(request->getParam("action", true)->value() == "reset"){
      request->send(200, "text/plain", "Device reseting");
      delay(1000);
      reset_config();
    }
  });

  server.on("/restart", HTTP_POST, handleRestart);

  server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Page you are requested cannot be found!!");
		request->send(response);
	});
  server.begin();
}

// fallback and first configuration route
void ICACHE_FLASH_ATTR webserver_fallback(){
  // Route to load requested file
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/style.css", "text/css");
  });
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/config.html", String(), false, config_processor);
  });

  server.on("/save_config", HTTP_POST,  [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "Configuration is saving. Device will reboot soon!!");
    handleConfig(request);
  });
  server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Not found");
		request->send(response);
	});
  server.begin();
}