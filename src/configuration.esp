bool ICACHE_FLASH_ATTR set_config(){
  File file_konfig = SPIFFS.open("/konfig.json", "r");
  if(!file_konfig){
#ifdef DEBUG
    Report("Config file not found!");
#endif
    return false;
  }
  size_t size = file_konfig.size();
  std::unique_ptr<char[]> buf(new char[size]);
  file_konfig.readBytes(buf.get(), size);
  DynamicJsonBuffer jsonBuffer;
  JsonObject& json_konfig = jsonBuffer.parseObject(buf.get());
  if(!json_konfig.success()){
#ifdef DEBUG
    Report("Failed to parse json configuration!!", 0);
#endif
    file_konfig.close();
    return false;
  }
#ifdef DEBUG
  json_konfig.printTo(Serial);
  Serial.println();
#endif
  String wifiSSID = json_konfig["wifi_ssid"];
  wifi_ssid = strdup(wifiSSID.c_str());
  
  String wifiPassword = json_konfig["wifi_password"];
  wifi_password = strdup(wifiPassword.c_str());
  
  wifi_mode = json_konfig["wifi_mode"];

  if(json_konfig["web_updater_url"] != NULL){
    web_updater = true;
    String proc_web_updater_url = json_konfig["web_updater_url"];
    web_updater_url = strdup(proc_web_updater_url.c_str());
    if(json_konfig["web_updater_token"] != NULL){
      String proc_web_updater_token = json_konfig["web_updater_token"];
      web_updater_token = strdup(proc_web_updater_token.c_str());
    }
  }

  if(json_konfig["mqtt_host"] != NULL){
    mqtt = true;
    String proc_mqtt_host = json_konfig["mqtt_host"];
    mqtt_host = strdup(proc_mqtt_host.c_str());
    String proc_mqtt_user = json_konfig["mqtt_user"];
    mqtt_user = strdup(proc_mqtt_user.c_str());
    String proc_mqtt_password = json_konfig["mqtt_password"];
    mqtt_password = strdup(proc_mqtt_password.c_str());
    String proc_mqtt_topic = json_konfig["mqtt_topic"];
    mqtt_topic = strdup(proc_mqtt_topic.c_str());
  }

  file_konfig.close();
  return true;
}

bool ICACHE_FLASH_ATTR save_config(){
  return true;
}

void ICACHE_FLASH_ATTR reset_config(){
#ifdef DEBUG
  Serial.println("Resetting configuration..");
#endif
  SPIFFS.remove("/konfig.json");
  delay(1000);
  ESP.restart();
}