///////////////////////////////////////////////////////////////////////////////////
/*
                Web Server Setup
  This file contains web server and web socket setup function. When need to add more
pages or new function you can edit this file and add the web server config on webserver function.

*/

///////////////////////////////////////////////////////////////////////////////////

//------------------------------------- HANDLE FIRST CONFIG-------------------------
void ICACHE_FLASH_ATTR handleFirstConfig(AsyncWebServerRequest *request){
  // checking and get variables value
  bool sts_save = save_first_webconfig(request);
  if(!sts_save){
    request->send(200, "text/html", "Configuration failed!<br><a href=\"\\\">Click here to back!<\\a>");
  }
  else{
    request->send(200, "text/html", "Configuration successfull!<br>Please close this page and go to new IP address!<br>Device will rebooting soon.");
    req_reboot = true;
  }
}

//------------------------------------- HANDLE RESTART------------------------------
void ICACHE_FLASH_ATTR handleRestart(AsyncWebServerRequest *request){
  if(request->getParam("actiom", true)->value() == "restart"){
    request->send(200, "text/html", "Device restarting");
    req_reboot = true;
  }else{
    request->send(200, "text/html", "Illegal Request!!");
  }
}

//--------------------------------------HANDLE OTA UPDATE--------------------------
void ICACHE_FLASH_ATTR handleOTA(AsyncWebServerRequest *request){
  
}

//--------------------------------------HANDLE CONFIGURATION------------------------
void ICACHE_FLASH_ATTR handleConfig(AsyncWebServerRequest *request){
  if(request->hasParam("config", true)){
    String config = request->getParam("config",true)->value();
    Log("Change configuration...", 3);
    String msg = "";
    //SYSTEM CONFIGURATION
    if(request->hasParam("system_name",true)){
      Log("System configuration",3);
      if(save_system_webconfig(request)){
        msg =+ "System config saved. Device will reboot soon";
        req_reboot = true;
      }else{
        msg =+  "Failed to config WiFi network <a haref=\"/\">click here to return<\\a>";
      }
    }
    //NETWORK CONFIGURATION
    else if(request->hasParam("wifi_ssid",true)){
      Log("wifi config",3);
      if(save_wifi_webconfig(request)){
        msg =+ "WiFi network successfully configured. Device will reboot soon.";
        req_reboot = true;
      }else{
        msg =+  "Failed to config WiFi network <a haref=\"/\">click here to return<\\a>";
      }

    }
    //MQTT CONFIGURATION
    else if(config == "mqtt"){
      Log("MQTT Configuration",3);
      save_mqtt_webconfig(request);
      mqtt = set_mqtt_config();
      mqtt_connect();
      msg =+ "MQTT configuration saved. <a haref=\"/\">click here to return<\\a>";
    }
    //WEB UPDATER
    else if(request->hasParam("web_updater_url",true)){
      msg =+ "Web updater configuration saved. <a haref=\"/\">click here to return<\\a>";
    }else{
      msg =+ "Illegal request!!";
    }
  }
  request->send(200, "text/html", msg);
  
}

//--------------------------------WEB PAGES PROCESSOR--------------------------------
//configuration page text processor
String ICACHE_FLASH_ATTR config_processor(const String& var){
  if(var == "WIFI_SSID"){
    return wifi_ssid;
  }
  if(var == "NAVBAR"){
    if(config_state){
      return "block";
    }else{
      return "none";
    }
  }
  else if(var == "WIFI_PASSWORD"){
    return wifi_password;
  }
  else if(var == "WIFI_CLIENT"){
    if(wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "WIFI_AP"){
    if(!wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "MQTT_HOST"){
    return mqtt_host;
  }
  else if(var == "MQTT_USER"){
    return mqtt_user;
  }
  else if(var == "MQTT_PASSWORD"){
    return mqtt_password;
  }
  else if(var == "MQTT_PUB_TOPIC"){
    return mqtt_pub_topic;
  }
  else if(var == "MQTT_SUB_TOPIC"){
    return mqtt_sub_topic;
  }
  else if(var == "MQTT_CLIENTID"){
    return mqtt_clientID;
  }
  else if(var == "WEB_UPDATER_URL"){
    return web_updater_url;
  }
  else if(var == "WEB_UPDATER_TOKEN"){
    return web_updater_token;
  }
  else{
    return "";
  }
}

//home page prosessor
String ICACHE_FLASH_ATTR processor(const String& var){
  Serial.println(var);
  if(var == "STATE"){
    if(digitalRead(statusLED)){
      ledState = "ON";
    }
    else{
      ledState = "OFF";
    }
    Serial.print(ledState);
    return ledState;
  }
  else{
    return "0";
  }
}

//----------------------------------------------WEB ROUTES---------------------------
// main web server route

void ICACHE_FLASH_ATTR handle_general(){
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/style.css", "text/css");
  });
  server.on("/bootstrap.min.css", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", bootstrap_min_css_gz, bootstrap_min_css_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  server.on("/bootstrap.min.js", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", bootstrap_min_js_gz, bootstrap_min_js_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  // server.on("/bootstrap.min.css.map", HTTP_GET, [](AsyncWebServerRequest *request){
  //   AsyncWebServerResponse *response = request->beginResponse_P(200, "", bootstrap_min_css_map_gz, bootstrap_min_css_map_gz_len);
  //   response->addHeader("Content-Encoding", "gzip");
  //   request->send(response);
  // });
    server.on("/jquery.min.js", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", jquery_min_js_gz, jquery_min_js_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Not found");
		request->send(response);
	});
  server.on("/reset", HTTP_POST, [](AsyncWebServerRequest *request){
    if(request->getParam("action", true)->value() == "reset"){
      request->send(200, "text/plain", "Configuration file removed, Device will reboot soon.<br>Please connect to default network to first configure.");
      delay(1000);
      reset_config();
    }
  });
  server.on("/restart", HTTP_POST, handleRestart);
  server.begin();
}

// normall route
void ICACHE_FLASH_ATTR webserver(){
  // Web Server using main web service
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });

    // Route to set GPIO to HIGH
  server.on("/on", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, HIGH);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  
  // Route to set GPIO to LOW
  server.on("/off", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, LOW);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });


  //web configuration and 404
  server.on("/config", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/konfig.html", String(), false, config_processor);
  });

  server.on("/save_config", HTTP_POST, handleConfig);
  handle_general();
}

// fallback and first configuration route
void ICACHE_FLASH_ATTR webserver_fallback(){

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", first_config_html_gz, first_config_html_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  server.on("/", HTTP_POST, handleFirstConfig);

  // server.on("/save_config", HTTP_POST,  [](AsyncWebServerRequest *request){
  //   request->send(200, "text/plain", "Configuration is saving. Device will reboot soon!!");
  //   handleConfig(request);
  // });

  handle_general();
}