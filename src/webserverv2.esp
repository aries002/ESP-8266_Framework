///////////////////////////////////////////////////////////////////////////////////
/*
                Web Server Setup
  This file contains web server and web socket setup function. When need to add more
pages or new function you can edit this file and add the web server config on webserver function.

*/

///////////////////////////////////////////////////////////////////////////////////



//------------------------------------- HANDLE RESTART------------------------------
void ICACHE_FLASH_ATTR handleRestart(AsyncWebServerRequest *request){
  if(request->getParam("actiom", true)->value() == "restart"){
    request->send(200, "text/plain", "Device restarting");
    req_reboot = true;
  }else{
    request->send(200, "text/plain", "Illegal Request!!");
  }
}

//--------------------------------------HANDLE OTA UPDATE--------------------------
void ICACHE_FLASH_ATTR handleOTA(AsyncWebServerRequest *request){
  
}

//--------------------------------------HANDLE CONFIGURATION------------------------
void ICACHE_FLASH_ATTR handleConfig(AsyncWebServerRequest *request){
  Log("Change configuration...", 3);
  String msg = "";
  if(request->hasParam("system_name")){
    if(save_system_webconfig(request)){
      msg =+ "System config saved. Device will reboot soon";
      req_reboot = true;
    }else{
      msg =+  "Failed to config WiFi network <a haref=\"/\">click here to return<\\a>";
    }
  }else if(request->hasParam("wifi_ssid")){
    if(save_wifi_webconfig(request)){
      msg =+ "WiFi network successfully configured. Device will reboot soon.";
      req_reboot = true;
    }else{
      msg =+  "Failed to config WiFi network <a haref=\"/\">click here to return<\\a>";
    }

  }else if(request->hasParam("mqtt_host")){
    save_mqtt_webconfig(request);
    msg =+ "MQTT configuration saved. <a haref=\"/\">click here to return<\\a>";
  }else if(request->hasParam("web_updater_url")){
    msg =+ "Web updater configuration saved. <a haref=\"/\">click here to return<\\a>";
  }else{
    msg =+ "Illegal request!!";
  }
  request->send(200, "text/plain", msg);
  
}

//-------------------------------------HANDLE SENSOR READING------------------------
String ICACHE_FLASH_ATTR getTemperature() {
  long temperature = random(28, 38);
  // Read temperature as Fahrenheit (isFahrenheit = true)
  //float temperature = 1.8 * bme.readTemperature() + 32;
  Serial.println(temperature);
  return String(temperature);
}

String ICACHE_FLASH_ATTR getHumidity() {
  long humidity = random(50, 80);
  Serial.println(humidity);
  return String(humidity);
}

String ICACHE_FLASH_ATTR getPressure() {
  long pressure = random(10, 100);
  Serial.println(pressure);
  return String(pressure);
}

//--------------------------------WEB PAGES BACK END--------------------------------
//configuration page text processor
String ICACHE_FLASH_ATTR config_processor(const String& var){
  if(var == "WIFI_SSID"){
    return wifi_ssid;
  }
  else if(var == "WIFI_PASSWORD"){
    return wifi_password;
  }
  else if(var == "WIFI_CLIENT"){
    if(wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "WIFI_AP"){
    if(!wifi_mode){
      return "checked";
    }
    else{
      return "";
    }
  }
  else if(var == "MQTT_HOST"){
    return mqtt_host;
  }
  else if(var == "MQTT_USER"){
    return mqtt_user;
  }
  else if(var == "MQTT_PASSWORD"){
    return mqtt_password;
  }
  else if(var == "MQTT_PUB_TOPIC"){
    return mqtt_pub_topic;
  }
  else if(var == "MQTT_SUB_TOPIC"){
    return mqtt_sub_topic;
  }
  else if(var == "MQTT_CLIENTID"){
    return mqtt_clientID;
  }
  else if(var == "WEB_UPDATER_URL"){
    return web_updater_url;
  }
  else if(var == "WEB_UPDATER_TOKEN"){
    return web_updater_token;
  }
  else{
    return "";
  }
}

//home page prosessor
String ICACHE_FLASH_ATTR processor(const String& var){
  Serial.println(var);
  if(var == "STATE"){
    if(digitalRead(statusLED)){
      ledState = "ON";
    }
    else{
      ledState = "OFF";
    }
    Serial.print(ledState);
    return ledState;
  }
  else if (var == "TEMPERATURE"){
    return getTemperature();
  }
  else if (var == "HUMIDITY"){
    return getHumidity();
  }
  else if (var == "PRESSURE"){
    return getPressure();
  }
  else{
    return "0";
  }
}

//----------------------------------------------WEB ROUTES---------------------------
// main web server route

void ICACHE_FLASH_ATTR handle_general(){
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/style.css", "text/css");
  });
  server.on("/bootsrap.min.css", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", bootstrap_min_css_gz, bootstrap_min_css_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  server.on("/bootsrap.min.js", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", bootstrap_min_js_gz, bootstrap_min_js_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
    server.on("/jquery.js", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", jquery_min_js_gz, jquery_min_js_gz_len);
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
  server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Not found");
		request->send(response);
	});
  server.on("/reset", HTTP_POST, [](AsyncWebServerRequest *request){
    if(request->getParam("action", true)->value() == "reset"){
      request->send(200, "text/plain", "Configuration file removed, Device will reboot soon.<br>Please connect to default network to first configure.");
      delay(1000);
      reset_config();
    }
  });
  server.on("/restart", HTTP_POST, handleRestart);
  server.begin();
}

// normall route
void ICACHE_FLASH_ATTR webserver(){
  // Web Server using main web service
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });

    // Route to set GPIO to HIGH
  server.on("/on", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, HIGH);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  
  // Route to set GPIO to LOW
  server.on("/off", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(statusLED, LOW);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });

  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getTemperature().c_str());
  });
  
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getHumidity().c_str());
  });
  
  server.on("/pressure", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getPressure().c_str());
  });


  //web configuration and 404
  server.on("/config", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/config.html", String(), false, config_processor);
  });

  server.on("/save_config", HTTP_POST, handleConfig);


  handle_general();
}

// fallback and first configuration route
void ICACHE_FLASH_ATTR webserver_fallback(){

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/config.html", String(), false, config_processor);
  });

  server.on("/save_config", HTTP_POST,  [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "Configuration is saving. Device will reboot soon!!");
    handleConfig(request);
  });
  handle_general();
}